// ignore: prefer_relative_imports
import 'package:wrestling_scoreboard_common/common.dart';

/// This file is generated, DO NOT CHANGE BY HAND.

/// Topo-Hierarchically ordered data types (most to least dependent on others).
final dataTypes = [
  TeamMatchBout,
  TeamLineupParticipation,
  ScratchBout,
  LeagueWeightClass,
  DivisionWeightClass,
  CompetitionParticipation,
  CompetitionBout,
  CompetitionWeightCategory,
  WeightClass,
  User,
  TeamMatch,
  TeamLineup,
  TeamClubAffiliation,
  LeagueTeamParticipation,
  Team,
  SecuredUser,
  CompetitionLineup,
  BoutAction,
  Bout,
  AthleteBoutState,
  Membership,
  CompetitionPerson,
  Person,
  League,
  Division,
  CompetitionSystemAffiliation,
  CompetitionAgeCategory,
  Competition,
  Club,
  AgeCategory,
  Organization,
  BoutResultRule,
  BoutConfig,
];

String getTableNameFromType(Type t) {
  return switch (t) {
    const (BoutConfig) => BoutConfig.cTableName,
    const (BoutResultRule) => BoutResultRule.cTableName,
    const (Organization) => Organization.cTableName,
    const (AgeCategory) => AgeCategory.cTableName,
    const (Club) => Club.cTableName,
    const (Competition) => Competition.cTableName,
    const (CompetitionAgeCategory) => CompetitionAgeCategory.cTableName,
    const (CompetitionSystemAffiliation) => CompetitionSystemAffiliation.cTableName,
    const (Division) => Division.cTableName,
    const (League) => League.cTableName,
    const (Person) => Person.cTableName,
    const (CompetitionPerson) => CompetitionPerson.cTableName,
    const (Membership) => Membership.cTableName,
    const (AthleteBoutState) => AthleteBoutState.cTableName,
    const (Bout) => Bout.cTableName,
    const (BoutAction) => BoutAction.cTableName,
    const (CompetitionLineup) => CompetitionLineup.cTableName,
    const (SecuredUser) => SecuredUser.cTableName,
    const (Team) => Team.cTableName,
    const (LeagueTeamParticipation) => LeagueTeamParticipation.cTableName,
    const (TeamClubAffiliation) => TeamClubAffiliation.cTableName,
    const (TeamLineup) => TeamLineup.cTableName,
    const (TeamMatch) => TeamMatch.cTableName,
    const (User) => User.cTableName,
    const (WeightClass) => WeightClass.cTableName,
    const (CompetitionWeightCategory) => CompetitionWeightCategory.cTableName,
    const (CompetitionBout) => CompetitionBout.cTableName,
    const (CompetitionParticipation) => CompetitionParticipation.cTableName,
    const (DivisionWeightClass) => DivisionWeightClass.cTableName,
    const (LeagueWeightClass) => LeagueWeightClass.cTableName,
    const (ScratchBout) => ScratchBout.cTableName,
    const (TeamLineupParticipation) => TeamLineupParticipation.cTableName,
    const (TeamMatchBout) => TeamMatchBout.cTableName,
    const (BasicAuthService) => BasicAuthService.cTableName, // Only used for type encoding
    _ => throw UnimplementedError('ClassName for "${t.toString()}" not found.'),
  };
}

Type getTypeFromTableName(String tableName) {
  return switch (tableName) {
    BoutConfig.cTableName => BoutConfig,
    BoutResultRule.cTableName => BoutResultRule,
    Organization.cTableName => Organization,
    AgeCategory.cTableName => AgeCategory,
    Club.cTableName => Club,
    Competition.cTableName => Competition,
    CompetitionAgeCategory.cTableName => CompetitionAgeCategory,
    CompetitionSystemAffiliation.cTableName => CompetitionSystemAffiliation,
    Division.cTableName => Division,
    League.cTableName => League,
    Person.cTableName => Person,
    CompetitionPerson.cTableName => CompetitionPerson,
    Membership.cTableName => Membership,
    AthleteBoutState.cTableName => AthleteBoutState,
    Bout.cTableName => Bout,
    BoutAction.cTableName => BoutAction,
    CompetitionLineup.cTableName => CompetitionLineup,
    SecuredUser.cTableName => SecuredUser,
    Team.cTableName => Team,
    LeagueTeamParticipation.cTableName => LeagueTeamParticipation,
    TeamClubAffiliation.cTableName => TeamClubAffiliation,
    TeamLineup.cTableName => TeamLineup,
    TeamMatch.cTableName => TeamMatch,
    User.cTableName => User,
    WeightClass.cTableName => WeightClass,
    CompetitionWeightCategory.cTableName => CompetitionWeightCategory,
    CompetitionBout.cTableName => CompetitionBout,
    CompetitionParticipation.cTableName => CompetitionParticipation,
    DivisionWeightClass.cTableName => DivisionWeightClass,
    LeagueWeightClass.cTableName => LeagueWeightClass,
    ScratchBout.cTableName => ScratchBout,
    TeamLineupParticipation.cTableName => TeamLineupParticipation,
    TeamMatchBout.cTableName => TeamMatchBout,
    BasicAuthService.cTableName => BasicAuthService, // Only used for type decoding
    _ => throw UnimplementedError('Type for "${tableName.toString()}" not found.'),
  };
}

Future<int?> handleGenericJson(
  Map<String, dynamic> json, {
  required HandleSingleCallback handleSingle,
  required HandleManyCallback handleMany,
  required HandleSingleRawCallback handleSingleRaw,
  required HandleManyRawCallback handleManyRaw,
}) {
  final type = getTypeFromTableName(json['tableName'] as String);
  return switch (type) {
    const (BoutConfig) => handleJson<BoutConfig>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (BoutResultRule) => handleJson<BoutResultRule>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (Organization) => handleJson<Organization>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (AgeCategory) => handleJson<AgeCategory>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (Club) => handleJson<Club>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (Competition) => handleJson<Competition>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (CompetitionAgeCategory) => handleJson<CompetitionAgeCategory>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (CompetitionSystemAffiliation) => handleJson<CompetitionSystemAffiliation>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (Division) => handleJson<Division>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (League) => handleJson<League>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (Person) => handleJson<Person>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (CompetitionPerson) => handleJson<CompetitionPerson>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (Membership) => handleJson<Membership>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (AthleteBoutState) => handleJson<AthleteBoutState>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (Bout) => handleJson<Bout>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (BoutAction) => handleJson<BoutAction>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (CompetitionLineup) => handleJson<CompetitionLineup>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (SecuredUser) => handleJson<SecuredUser>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (Team) => handleJson<Team>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (LeagueTeamParticipation) => handleJson<LeagueTeamParticipation>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (TeamClubAffiliation) => handleJson<TeamClubAffiliation>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (TeamLineup) => handleJson<TeamLineup>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (TeamMatch) => handleJson<TeamMatch>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (User) => handleJson<User>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (WeightClass) => handleJson<WeightClass>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (CompetitionWeightCategory) => handleJson<CompetitionWeightCategory>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (CompetitionBout) => handleJson<CompetitionBout>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (CompetitionParticipation) => handleJson<CompetitionParticipation>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (DivisionWeightClass) => handleJson<DivisionWeightClass>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (LeagueWeightClass) => handleJson<LeagueWeightClass>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (ScratchBout) => handleJson<ScratchBout>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (TeamLineupParticipation) => handleJson<TeamLineupParticipation>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    const (TeamMatchBout) => handleJson<TeamMatchBout>(
      json,
      handleSingle: handleSingle,
      handleMany: handleMany,
      handleSingleRaw: handleSingleRaw,
      handleManyRaw: handleManyRaw,
    ),
    _ => throw UnimplementedError('Cannot handle Json for type "${type.toString()}".'),
  };
}

extension DataObjectParser on DataObject {
  static T fromJson<T extends DataObject>(Map<String, dynamic> json) {
    return switch (T) {
      const (BoutConfig) => BoutConfig.fromJson(json) as T,
      const (BoutResultRule) => BoutResultRule.fromJson(json) as T,
      const (Organization) => Organization.fromJson(json) as T,
      const (AgeCategory) => AgeCategory.fromJson(json) as T,
      const (Club) => Club.fromJson(json) as T,
      const (Competition) => Competition.fromJson(json) as T,
      const (CompetitionAgeCategory) => CompetitionAgeCategory.fromJson(json) as T,
      const (CompetitionSystemAffiliation) => CompetitionSystemAffiliation.fromJson(json) as T,
      const (Division) => Division.fromJson(json) as T,
      const (League) => League.fromJson(json) as T,
      const (Person) => Person.fromJson(json) as T,
      const (CompetitionPerson) => CompetitionPerson.fromJson(json) as T,
      const (Membership) => Membership.fromJson(json) as T,
      const (AthleteBoutState) => AthleteBoutState.fromJson(json) as T,
      const (Bout) => Bout.fromJson(json) as T,
      const (BoutAction) => BoutAction.fromJson(json) as T,
      const (CompetitionLineup) => CompetitionLineup.fromJson(json) as T,
      const (SecuredUser) => SecuredUser.fromJson(json) as T,
      const (Team) => Team.fromJson(json) as T,
      const (LeagueTeamParticipation) => LeagueTeamParticipation.fromJson(json) as T,
      const (TeamClubAffiliation) => TeamClubAffiliation.fromJson(json) as T,
      const (TeamLineup) => TeamLineup.fromJson(json) as T,
      const (TeamMatch) => TeamMatch.fromJson(json) as T,
      const (User) => User.fromJson(json) as T,
      const (WeightClass) => WeightClass.fromJson(json) as T,
      const (CompetitionWeightCategory) => CompetitionWeightCategory.fromJson(json) as T,
      const (CompetitionBout) => CompetitionBout.fromJson(json) as T,
      const (CompetitionParticipation) => CompetitionParticipation.fromJson(json) as T,
      const (DivisionWeightClass) => DivisionWeightClass.fromJson(json) as T,
      const (LeagueWeightClass) => LeagueWeightClass.fromJson(json) as T,
      const (ScratchBout) => ScratchBout.fromJson(json) as T,
      const (TeamLineupParticipation) => TeamLineupParticipation.fromJson(json) as T,
      const (TeamMatchBout) => TeamMatchBout.fromJson(json) as T,
      _ => throw UnimplementedError('Json conversation for "$T" not found.'),
    };
  }

  static Future<T> fromRaw<T extends DataObject>(Map<String, dynamic> raw, GetSingleOfTypeCallback getSingle) async {
    return switch (T) {
      const (BoutConfig) => (await BoutConfig.fromRaw(raw, getSingle)) as T,
      const (BoutResultRule) => (await BoutResultRule.fromRaw(raw, getSingle)) as T,
      const (Organization) => (await Organization.fromRaw(raw, getSingle)) as T,
      const (AgeCategory) => (await AgeCategory.fromRaw(raw, getSingle)) as T,
      const (Club) => (await Club.fromRaw(raw, getSingle)) as T,
      const (Competition) => (await Competition.fromRaw(raw, getSingle)) as T,
      const (CompetitionAgeCategory) => (await CompetitionAgeCategory.fromRaw(raw, getSingle)) as T,
      const (CompetitionSystemAffiliation) => (await CompetitionSystemAffiliation.fromRaw(raw, getSingle)) as T,
      const (Division) => (await Division.fromRaw(raw, getSingle)) as T,
      const (League) => (await League.fromRaw(raw, getSingle)) as T,
      const (Person) => (await Person.fromRaw(raw, getSingle)) as T,
      const (CompetitionPerson) => (await CompetitionPerson.fromRaw(raw, getSingle)) as T,
      const (Membership) => (await Membership.fromRaw(raw, getSingle)) as T,
      const (AthleteBoutState) => (await AthleteBoutState.fromRaw(raw, getSingle)) as T,
      const (Bout) => (await Bout.fromRaw(raw, getSingle)) as T,
      const (BoutAction) => (await BoutAction.fromRaw(raw, getSingle)) as T,
      const (CompetitionLineup) => (await CompetitionLineup.fromRaw(raw, getSingle)) as T,
      const (SecuredUser) => (await SecuredUser.fromRaw(raw, getSingle)) as T,
      const (Team) => (await Team.fromRaw(raw, getSingle)) as T,
      const (LeagueTeamParticipation) => (await LeagueTeamParticipation.fromRaw(raw, getSingle)) as T,
      const (TeamClubAffiliation) => (await TeamClubAffiliation.fromRaw(raw, getSingle)) as T,
      const (TeamLineup) => (await TeamLineup.fromRaw(raw, getSingle)) as T,
      const (TeamMatch) => (await TeamMatch.fromRaw(raw, getSingle)) as T,
      const (User) => (await User.fromRaw(raw, getSingle)) as T,
      const (WeightClass) => (await WeightClass.fromRaw(raw, getSingle)) as T,
      const (CompetitionWeightCategory) => (await CompetitionWeightCategory.fromRaw(raw, getSingle)) as T,
      const (CompetitionBout) => (await CompetitionBout.fromRaw(raw, getSingle)) as T,
      const (CompetitionParticipation) => (await CompetitionParticipation.fromRaw(raw, getSingle)) as T,
      const (DivisionWeightClass) => (await DivisionWeightClass.fromRaw(raw, getSingle)) as T,
      const (LeagueWeightClass) => (await LeagueWeightClass.fromRaw(raw, getSingle)) as T,
      const (ScratchBout) => (await ScratchBout.fromRaw(raw, getSingle)) as T,
      const (TeamLineupParticipation) => (await TeamLineupParticipation.fromRaw(raw, getSingle)) as T,
      const (TeamMatchBout) => (await TeamMatchBout.fromRaw(raw, getSingle)) as T,
      _ => throw UnimplementedError('Raw conversation for "$T" not found.'),
    };
  }
}
